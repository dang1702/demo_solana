{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Working/Demo/demo_solana/src/components/nft/nft-data-access.tsx"],"sourcesContent":["'use client'\n\nimport { useAnchorProvider } from '../solana/solana-provider'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { Connection, PublicKey, Transaction, SystemProgram, Keypair } from '@solana/web3.js'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport {\n  TOKEN_PROGRAM_ID,\n  createInitializeMintInstruction,\n  getAssociatedTokenAddress,\n  createAssociatedTokenAccountInstruction,\n  createMintToInstruction,\n} from '@solana/spl-token'\n\nexport function useNftProgram() {\n  const provider = useAnchorProvider()\n  const { connection } = provider\n  return { connection }\n}\n\nexport function useMintNft() {\n  const { connection } = useNftProgram()\n  const wallet = useWallet()\n  const client = useQueryClient()\n\n  return useMutation({\n    mutationKey: ['mint-nft'],\n    mutationFn: async (input: { name: string; symbol: string; description: string; image: string }) => {\n      if (!wallet.publicKey || !wallet.sendTransaction) throw new Error('Wallet not connected')\n\n      // 1. Generate a new Keypair for the mint\n      const mint = Keypair.generate()\n\n      // 2. Calculate rent for mint account\n      const lamports = await connection.getMinimumBalanceForRentExemption(82)\n\n      // 3. Build instructions\n      const createMintAccountIx = SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: 82,\n        lamports,\n        programId: TOKEN_PROGRAM_ID,\n      })\n      const initMintIx = createInitializeMintInstruction(\n        mint.publicKey,\n        0,\n        wallet.publicKey,\n        wallet.publicKey\n      )\n      const ata = await getAssociatedTokenAddress(mint.publicKey, wallet.publicKey)\n      const createAtaIx = createAssociatedTokenAccountInstruction(\n        wallet.publicKey,\n        ata,\n        wallet.publicKey,\n        mint.publicKey\n      )\n      const mintToIx = createMintToInstruction(\n        mint.publicKey,\n        ata,\n        wallet.publicKey,\n        1\n      )\n\n      // 4. Build transaction\n      const tx = new Transaction().add(\n        createMintAccountIx,\n        initMintIx,\n        createAtaIx,\n        mintToIx\n      )\n\n      // 5. Send transaction (mint is a signer)\n      const signature = await wallet.sendTransaction(tx, connection, { signers: [mint] })\n      await connection.confirmTransaction(signature)\n\n      return { mint: mint.publicKey.toString(), tokenAccount: ata.toString() }\n    },\n    onSuccess: () => {\n      client.invalidateQueries({ queryKey: ['nfts'] })\n    },\n  })\n}\n\nexport function useGetNfts() {\n  const { connection } = useNftProgram()\n  const wallet = useWallet()\n\n  return useQuery({\n    queryKey: ['nfts', wallet.publicKey?.toString()],\n    queryFn: async () => {\n      if (!wallet.publicKey) return []\n      const tokenAccounts = await connection.getParsedTokenAccountsByOwner(wallet.publicKey, {\n        programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),\n      })\n      return tokenAccounts.value\n    },\n    enabled: !!wallet.publicKey,\n  })\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Working/Demo/demo_solana/src/components/ui/card.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn('bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-title\" className={cn('leading-none font-semibold', className)} {...props} />\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-description\" className={cn('text-muted-foreground text-sm', className)} {...props} />\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn('col-start-2 row-span-2 row-start-1 self-start justify-self-end', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-content\" className={cn('px-6', className)} {...props} />\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-footer\" className={cn('flex items-center px-6 [.border-t]:pt-6', className)} {...props} />\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8VAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,qFAAqF;QAClG,GAAG,KAAK;;;;;;AAGf;KARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8VAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBAAO,8VAAC;QAAI,aAAU;QAAa,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAAa,GAAG,KAAK;;;;;;AACtG;MAFS;AAIT,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBAAO,8VAAC;QAAI,aAAU;QAAmB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAC/G;MAFS;AAIT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8VAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kEAAkE;QAC/E,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBAAO,8VAAC;QAAI,aAAU;QAAe,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QAAa,GAAG,KAAK;;;;;;AAClF;MAFS;AAIT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBAAO,8VAAC;QAAI,aAAU;QAAc,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QAAa,GAAG,KAAK;;;;;;AACpH;MAFS","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Working/Demo/demo_solana/src/components/nft/nft-ui.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { useMintNft, useGetNfts } from './nft-data-access'\nimport { Button } from '../ui/button'\nimport { Input } from '../ui/input'\nimport { Label } from '../ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'\nimport { AppModal } from '../app-modal'\nimport { ExplorerLink } from '../cluster/cluster-ui'\nimport { ellipsify } from '@/lib/utils'\n\nexport function MintNftButton() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [name, setName] = useState('')\n  const [symbol, setSymbol] = useState('')\n  const [description, setDescription] = useState('')\n  const [image, setImage] = useState('')\n\n  const mintNft = useMintNft()\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Mint NFT</Button>\n      <AppModal\n        title=\"Mint NFT\"\n        submitDisabled={!name || !symbol || !description || !image || mintNft.isPending}\n        submitLabel=\"Mint\"\n        submit={() => {\n          mintNft.mutateAsync({ name, symbol, description, image })\n          setIsOpen(false)\n        }}\n      >\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"NFT Name\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"symbol\">Symbol</Label>\n            <Input\n              id=\"symbol\"\n              value={symbol}\n              onChange={(e) => setSymbol(e.target.value)}\n              placeholder=\"NFT Symbol\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Input\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"NFT Description\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"image\">Image URL</Label>\n            <Input\n              id=\"image\"\n              value={image}\n              onChange={(e) => setImage(e.target.value)}\n              placeholder=\"NFT Image URL\"\n            />\n          </div>\n        </div>\n      </AppModal>\n    </>\n  )\n}\n\nexport function NftList() {\n  const { data: nfts, isLoading } = useGetNfts()\n\n  if (isLoading) return <div>Loading...</div>\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {nfts?.map(({ account, pubkey }) => (\n        <Card key={pubkey.toString()}>\n          <CardHeader>\n            <CardTitle>\n              <ExplorerLink path={`account/${pubkey.toString()}`} label={ellipsify(pubkey.toString())} />\n            </CardTitle>\n            <CardDescription>\n              <ExplorerLink\n                path={`account/${account.data.parsed.info.mint}`}\n                label={ellipsify(account.data.parsed.info.mint)}\n              />\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"mt-2\">Balance: {account.data.parsed.info.tokenAmount.uiAmount}</p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Working/Demo/demo_solana/src/components/app-hero.tsx"],"sourcesContent":["import React from 'react'\n\nexport function AppHero({\n  children,\n  subtitle,\n  title,\n}: {\n  children?: React.ReactNode\n  subtitle?: React.ReactNode\n  title?: React.ReactNode\n}) {\n  return (\n    <div className=\"flex flex-row justify-center py-[16px] md:py-[64px]\">\n      <div className=\"text-center\">\n        <div className=\"max-w-2xl\">\n          {typeof title === 'string' ? <h1 className=\"text-5xl font-bold\">{title}</h1> : title}\n          {typeof subtitle === 'string' ? <p className=\"pt-4 md:py-6\">{subtitle}</p> : subtitle}\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEO,SAAS,QAAQ,EACtB,QAAQ,EACR,QAAQ,EACR,KAAK,EAKN;IACC,qBACE,8VAAC;QAAI,WAAU;kBACb,cAAA,8VAAC;YAAI,WAAU;sBACb,cAAA,8VAAC;gBAAI,WAAU;;oBACZ,OAAO,UAAU,yBAAW,8VAAC;wBAAG,WAAU;kCAAsB;;;;;+BAAc;oBAC9E,OAAO,aAAa,yBAAW,8VAAC;wBAAE,WAAU;kCAAgB;;;;;+BAAgB;oBAC5E;;;;;;;;;;;;;;;;;AAKX;KApBgB","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Working/Demo/demo_solana/src/app/nft/page.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletButton } from '@/components/solana/solana-provider'\nimport { MintNftButton, NftList } from '@/components/nft/nft-ui'\nimport { AppHero } from '@/components/app-hero'\n\nexport default function NftPage() {\n  const { publicKey } = useWallet()\n\n  return publicKey ? (\n    <div>\n      <AppHero\n        title=\"NFT Minting\"\n        subtitle=\"Create and manage your NFTs on Solana\"\n      >\n        <div className=\"my-4\">\n          <MintNftButton />\n        </div>\n      </AppHero>\n      <div className=\"mt-8\">\n        <h2 className=\"text-2xl font-bold mb-4\">Your NFTs</h2>\n        <NftList />\n      </div>\n    </div>\n  ) : (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"hero py-[64px]\">\n        <div className=\"hero-content text-center\">\n          <WalletButton />\n        </div>\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;;;AANA;;;;;AAQe,SAAS;;IACtB,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,wXAAA,CAAA,YAAS,AAAD;IAE9B,OAAO,0BACL,8VAAC;;0BACC,8VAAC,oIAAA,CAAA,UAAO;gBACN,OAAM;gBACN,UAAS;0BAET,cAAA,8VAAC;oBAAI,WAAU;8BACb,cAAA,8VAAC,yIAAA,CAAA,gBAAa;;;;;;;;;;;;;;;0BAGlB,8VAAC;gBAAI,WAAU;;kCACb,8VAAC;wBAAG,WAAU;kCAA0B;;;;;;kCACxC,8VAAC,yIAAA,CAAA,UAAO;;;;;;;;;;;;;;;;6BAIZ,8VAAC;QAAI,WAAU;kBACb,cAAA,8VAAC;YAAI,WAAU;sBACb,cAAA,8VAAC;gBAAI,WAAU;0BACb,cAAA,8VAAC,qJAAA,CAAA,eAAY;;;;;;;;;;;;;;;;;;;;AAKvB;GA3BwB;;QACA,wXAAA,CAAA,YAAS;;;KADT","debugId":null}}]
}